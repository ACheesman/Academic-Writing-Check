#!/usr/bin/env perl
#
# Author : Devdatta Akhawe  http://www.cs.berkeley.edu/~devdatta 
#
#
# Finds passive, duplicate and weasel words being used
# Original Idea and list of words by Matthew Might
# http://matt.might.net/articles/shell-scripts-for-passive-voice-weasel-words-duplicates/

use strict ;
use warnings;

# maybe use env variables instead 
use constant PASSIVE => 1;
use constant DUPS => 1;
use constant WEASEL => 1;

# Color codes are at http://www.cyberciti.biz/faq/bash-shell-change-the-color-of-my-shell-prompt-under-linux-or-unix/
my ($passive_color,$dup_color,$weasel_color,$def_color)=("\e[1;31m","\e[1;33m","\e[1;32m","\e[0m");

my $regex = getPassiveRegex();
my $regex_w = getWeaselRegex();
my $filename="";

if($#ARGV==0 and -d $ARGV[0]){
  my $dirname=shift @ARGV;
  $dirname =~ s/\/$//;
  @ARGV=(<$dirname/*tex>);
}

#use stdin if no file available
@ARGV=("/dev/stdin") unless @ARGV;

while(($filename=shift @ARGV)){
    open FILE,$filename or die "Error opening $filename";
    my $str="";
    while(<FILE>){
       $str.=$_;
    }
    close(FILE);
    my $count = ($str =~ s/$regex/\x{EFFF}$passive_color$1$def_color$2$passive_color$3$def_color\x{EFFF}/ig) if PASSIVE;
    $count += ($str =~ s/\b(\w+)([\n ]+)(\1)\b/\x{EFFF}$dup_color$1$def_color$2$dup_color$3$def_color\x{EFFF}/ig) if DUPS;
    $count += ($str =~ s/$regex_w/\x{EFFF}$weasel_color$1$def_color\x{EFFF}/ig) if WEASEL;
    next unless $count;
    my $linenum=0;
    my $extra="";
    foreach my $line (split("\n",$str)){
      $linenum++;
      next unless $line =~ m/\x{EFFF}/;
      $line =~ s/\x{EFFF}//g;
      # we can't do this while setting str since that messes up line numbers
      # I am pretty sure this is ok since the % would prevent match across lines
      next if $line =~ m/^%/;
      print "$filename:$linenum: $line\n";      
    }
    # some spacing from the new file
    print "\n" if @ARGV;
}

sub getPassiveRegex{
  my $irregulars="awoken|\
been|born|beat|\
become|begun|bent|\
beset|bet|bid|\
bidden|bound|bitten|\
bled|blown|broken|\
bred|brought|broadcast|\
built|burnt|burst|\
bought|cast|caught|\
chosen|clung|come|\
cost|crept|cut|\
dealt|dug|dived|\
done|drawn|dreamt|\
driven|drunk|eaten|fallen|\
fed|felt|fought|found|\
fit|fled|flung|flown|\
forbidden|forgotten|\
foregone|forgiven|\
forsaken|frozen|\
gotten|given|gone|\
ground|grown|hung|\
heard|hidden|hit|\
held|hurt|kept|knelt|\
knit|known|laid|led|\
leapt|learnt|left|\
lent|let|lain|lighted|\
lost|made|meant|met|\
misspelt|mistaken|mown|\
overcome|overdone|overtaken|\
overthrown|paid|pled|proven|\
put|quit|read|rid|ridden|\
rung|risen|run|sawn|said|\
seen|sought|sold|sent|\
set|sewn|shaken|shaven|\
shorn|shed|shone|shod|\
shot|shown|shrunk|shut|\
sung|sunk|sat|slept|\
slain|slid|slung|slit|\
smitten|sown|spoken|sped|\
spent|spilt|spun|spit|\
split|spread|sprung|stood|\
stolen|stuck|stung|stunk|\
stridden|struck|strung|\
striven|sworn|swept|\
swollen|swum|swung|taken|\
taught|torn|told|thought|\
thrived|thrown|thrust|\
trodden|understood|upheld|\
upset|woken|worn|woven|\
wed|wept|wound|won|\
withheld|withstood|wrung|\
written";
  $irregulars =~ s/\\//mg;
  $irregulars =~ s/\n//g;
  #DO NOT CHANGE - the $1 and $2 in other parts of the script depend on the ordering of capturing groups
 return '\b(am|are|were|being|is|been|was|be)\b([\n ]+)(\w+ed|('.$irregulars.'))\b';
}

sub getWeaselRegex{
 #TODO add better support for wordfile

 #Do not change $1,$2 etc depend on this
 return '\b(many|various|very|fairly|several|extremely|exceedingly|quite|remarkably|few|surprisingly|mostly|largely|huge|tiny|((are|is) a number)|excellent|interestingly|significantly|substantially|clearly|vast|relatively|completely)\b';
}
